// JavaCC Grammar file to recognise bus declarations, like the one in input.txt

PARSER_BEGIN(MyParser)
package edu.curtin.examplepackage;

public class MyParser
{}

PARSER_END(MyParser)

SKIP : {
    " " | "\n" | "\t" | "\r"
}

// Different state for when we're inside a string. We switch to IN_STRING when we see a double quote, and switch
// back to DEFAULT when we see the next one.
<IN_STRING> TOKEN : {
    < STR_END: "\"" > : DEFAULT
}

TOKEN: {
    // Required whitespace
    < BREAK: " " | "\n" | "\t" | "\r\n" > |

    // Building blocks
    < DIGIT: ["0"-"9"] > |
    < NUMBER: <DIGIT> ( <DIGIT> )* > |
    < TIME_24_HOUR: ( "1" | "2" )? <DIGIT> ":" <DIGIT> <DIGIT> > |
    < STR_START: "\"" > : IN_STRING |

    // Bus stuff
    < BUS_DECLARATION: "bus(" ( <BREAK> )* <NUMBER> ( <BREAK> )* ")" ( <BREAK> )* "->" > |
    < BUS_NAME: <STR_START> ( ~["\""] )* <STR_END> > |
    < BUS_TIME: "at" ( <BREAK> )+ <TIME_24_HOUR> ( ( <BREAK> )+ <TIME_24_HOUR> )* > |
    < BUS_STOPS: "via" ( <BREAK> )+ "stops" ( <BREAK> )+ <NUMBER> ( ( <BREAK> )+ <NUMBER> )+ > |
    < BUS_FREE: "free" >
}

void busFile() :
{}
{
    (
        <BUS_DECLARATION>
        <BUS_NAME>
        <BUS_TIME>
        <BUS_STOPS>
        ( <BUS_FREE> )?
    )*
    <EOF>
}

